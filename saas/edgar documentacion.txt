saas.code-workspace es donde se salva el ambiente de vs (file save as workspace) # type: ignore


pip install -r requirements.txt

Django-5.1.6

(inside src folder)
django-admin startproject secuvast 



en los URLS pattern de (URLS.py) convocan las funciones que esten en views.py



Los templates son llamados desde la funcion template y tipificando el Base_dir del settings under secuvast
siempre lo ideal es tenerlos agrupados en la misma carpeta

****************************************
las funciones en las html en django se usan con doble llave {{ }}

como por ejemplo 

en la funcion en las views.py 

def home_view(request, *args, **kwargs):
    if request.user.is_authenticated:
        print(request.user.first_name)
    return about_view(request, *args, **kwargs)


    se invoca el request
 
y en el HTML se puede llamar usando {{request.user}} o cualquier otra funcion referente a request 

inclusive se puede hacer una funcion en las views.py y despues llamarla en el HTML {{cualquiercosa}}

****************************************

python manage.py startapp visits 


**************

python-decouple (requirements)

esto en el settings o cualquier otro codigo para declarar cuales variables agarrar del .env file 

from decouple import config

DJANGO_DEBUG=False ######(.env)
DEBUG = config("DJANGO_DEBUG") ## En el codigo


***********************************
python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())' ### create a secret key
5&j7y3@7884x(708fw6w^w3b^12%+4+l=#b98#)y5m1@@mi#@)

****************************************
requirements para la base de datos

psycopg[binary] para user el postgresql

dj-database-url para hacer elk parsing de el link de la database que viene de neon

2:12:00 habla sobre Neon y su consola

https://console.neon.tech/app/projects/summer-forest-37853460?branchId=br-orange-resonance-a5vtoa9l&database=neondb

Con las Branch podemos usar un staging para hacer development y no tocas prod
**********************************

Request de los requirements es para descargar los CSS y JS localmente sin 
nesecidad de tenerlo necesariamente descargado

Todo esto esta en helpers/downloader.property






*******************************************

en el min 2:43:30 +- el crea una app para que corra una funcion 
podria usarse para correr los pentest?


el creo una app usando python manage.py startapp commando
creo varios archivos adentro con el __init__.py t creo el vendor_pull.py
interesante que despues lo activa en consola usando python manage.py vendor_pull

*******************************************
EL dice que moverse de white noise a django-storages es mejor en el futuro
*******************************************




*******************************************


3:20:00
https://www.youtube.com/watch?v=WbNNESIxJnY&t=3223s&ab_channel=CodingEntrepreneurs

https://github.com/codingforentrepreneurs/SaaS-for-Enterprise-with-Django/tree/main







***************************
gmail
rjai druq drjq wszf
https://www.codingforentrepreneurs.com/blog/sending-email-in-django-from-gmail


Podriamos crear otro app para usar en development

***************************

Para todo lo de los registros y login
https://docs.allauth.org/


al agregar en el settings en las apps y el midddleware no esatamos seguros de cual exactamente
se creo el social accounts en el admin panel 
"allauth.account.middleware.AccountMiddleware",

apps
'allauth',
    'allauth.account',
    'allauth.socialaccount',
***********************

Estamos usando nuestros Archivos locales para los static por que nos da la ventaja de no tener dependencia de externos.

En caso de que queramos usar los cdn para que todo cargue mas rapido tendriamos que poner en los template lo que esta abajo 

Solución intermedia: Usar un CDN con un fallback local
Si quieres lo mejor de ambos mundos (el rendimiento de un CDN y la fiabilidad de tener una copia local en caso de que el CDN falle), puedes usar un fallback. Esto significa que intentas cargar el archivo desde el CDN, y si por alguna razón no se puede cargar (por ejemplo, si el CDN no está disponible), se carga desde un archivo local.

Aquí tienes un ejemplo de cómo hacerlo:

html
Copy
<script src="https://cdn.jsdelivr.net/npm/flowbite@1.0.0/dist/flowbite.min.js"></script>
<script>
    if (typeof Flowbite === 'undefined') {
        // Si el CDN no carga, carga el archivo local
        var script = document.createElement('script');
        script.src = "{% static 'vendors/flowbite.min.js' %}";
        document.head.appendChild(script);
    }
</script>

***********************
WARNINGS:
?: (slippers.E001) Slippers was unable to find a components.yaml file.
        HINT: Make sure it's in a root template directory.
 
Esto se soluciona creadno components.yaml en /src//templates
Con esto>

paths:
  - components

  
***********************

?: settings.ACCOUNT_AUTHENTICATION_METHOD is deprecated, use: settings.ACCOUNT_LOGIN_METHODS = {'username'}
?: settings.ACCOUNT_EMAIL_REQUIRED is deprecated, use: settings.ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
***********************
"GET /static/allauth_ui/output.css HTTP/1.1" 404 1877
***********************
Temas para el accounts/etc

 login
https://daisyui.com/docs/themes/



***********************
Usamos esta version por que una mayor da problemas con un output.css que no existe
django-allauth-ui==1.5.3

***********************


Todo lo relacionado a los login de Allauth estan aqui 
/root/dev/saas/venv/lib/python3.12/site-packages/allauth/templates/allauth

esto es el virtual env entonces si queremos hacer alguna mofdificacion en nuestro codifo perse
no es buena practica hacer el cambio ahi ya que al tener otro virtual env se perderia
entonces se crea una nueva carpeta segun se la directorio por ejemplo los templates es muiy buen ejemplo

nosotros creamos 
allauth/templates/allauth/layouts 
y ahi replicamos el base.html y agregamos el nuestro para que lo extienda 

***********************
En el navbar tenemos los estilos de los menus y donde se pueden cambiar el logo.
Aparte estan que opciones del menu pueda ver el usuario
dependiendo si esta autenticado

***********************

the message for sigin and signout 
{% include 'base/messages.html' with messages=messages %}
This is added in base.html
***********************

accounts/ login/ [name='account_login']
accounts/ logout/ [name='account_logout']
accounts/ inactive/ [name='account_inactive']
accounts/ signup/ [name='account_signup']
accounts/ reauthenticate/ [name='account_reauthenticate']
accounts/ email/ [name='account_email']
accounts/ confirm-email/ [name='account_email_verification_sent']
accounts/ ^confirm-email/(?P<key>[-:\w]+)/$ [name='account_confirm_email']
accounts/ password/change/ [name='account_change_password']
accounts/ password/set/ [name='account_set_password']
accounts/ password/reset/ [name='account_reset_password']
accounts/ login/code/confirm/ [name='account_confirm_login_code']
accounts/ password/reset/key/done/ [name='account_reset_password_from_key_done']
accounts/ ^password/reset/key/(?P<uidb36>[0-9A-Za-z]+)-(?P<key>.+)/$ [name='account_reset_password_from_key']
accounts/ password/reset/done/ [name='account_reset_password_done']
accounts/ 3rdparty/
accounts/ social/login/cancelled/
accounts/ social/login/error/
accounts/ social/signup/
accounts/ social/connections/
accounts/ github/

***********************

4:35:00 hace el social account para el github para poder hacer login
en el futuro capaz podriamos usar google 

***********************


4:45:00 el limita las vistas de las paginas conn una autorizacion basica
simplemente quien es usuario poniendo un codigo predefinido puede o no accedewr al sitio

**********************


el usa un decorator del contrib para habiliatar el from django.contrib.auth.decorators import login_required
@login_required






**********************

En cualquier def de las views hara que se requiera la autenticado del usuario 
@login_required


**********************


5:20