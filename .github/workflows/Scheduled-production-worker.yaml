# Nombre del flujo de trabajo
name: Django Scheduled Tasks and CI

# --- SECCIÓN 'ON' CORREGIDA ---
on:
  # 1. Permite ejecutar el workflow manualmente
  workflow_dispatch:

  # 2. Se ejecuta cuando haces push a la rama 'main'
  push:
    branches:
      - main

  # 3. Se ejecuta cuando se abre un Pull Request hacia 'main'
  pull_request:
    branches:
      - main

  # 4. Tareas programadas (CORREGIDO de 'scheduler' a 'schedule')
  schedule:
    # Ejecuta el workflow a las 01:00 y 12:00 UTC todos los días
    - cron: '0 1,12 * * *'
    # Ejecuta el workflow a las 04:00 UTC el primer día de cada mes
    - cron: '0 4 1 * *'

# --- FIN DE LA CORRECCIÓN ---


jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # Tus variables de entorno, tal como las definiste
    env:
      DJANGO_DEBUG: 'False' # En producción o CI, esto siempre debe ser False
      STRIPE_TEST_OVERRIDE: 'True' 
      NEON_TEST_BRANCH: 'Secuvast-Test-Delete'
      NEON_PROD_BRANCH: 'Secuvast-Prod'
      # NOTA: Los siguientes secrets DEBEN estar configurados en GitHub
      # Settings > Secrets and variables > Actions > Repository secrets
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
      NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Neon CLI
        run: npm install -g neonctl
      
      # No he modificado este bloque, es tu lógica para obtener la URL de la BD
      - name: Get Connection String for Test Branch
        run: |
          DB_URL=$(neonctl connection-string \
            --branch "${{ env.NEON_TEST_BRANCH }}" \
            --database-name "neondb" \
            --project-id "${{ secrets.NEON_PROJECT_ID }}")
          echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV
        env:
          # Pasamos la API Key de Neon específicamente a este paso
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}

      - name: Setup Django Secret Key
        run: echo "DJANGO_SECRET_KEY=$(openssl rand -base64 32)" >> $GITHUB_ENV

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r saas/requirements.txt

      # Tu paso para sincronizar suscripciones
      - name: Django users Sync Stripe Subscriptions
        if: github.event_name == 'schedule' && github.event.schedule == '0 1,12 * * *'
        working-directory: ./saas/src
        run: python manage.py sync_user_subs --day-start 0 --day-end 1

      # Tu paso para limpiar suscripciones "dangling"
      - name: Django users Clear Dangling Stripe Subscriptions
        if: github.event_name == 'schedule' && github.event.schedule == '0 4 1 * *'
        working-directory: ./saas/src
        run: |
          # NOTA: Asegúrate que tu comando se llame así. En un ejemplo anterior era 'clear_dangling'
          python manage.py clear_dangling_stripe_subs --day-start 0 --day-end 0