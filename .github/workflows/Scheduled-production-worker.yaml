name: Django CI/CD Pipeline

on:
    workflow_dispatch: # Permite ejecutar manualmente el workflow desde la interfaz de GitHub
    # Puedes ejecutar este workflow manualmente desde la interfaz de GitHub
    scheduler:
      - cron: '0 1,12 * * *' # Ejecuta el workflow a las 01:00 AM y 12:00 PM todos los días
      - cron: '0 4 1 * *' # Ejecuta el workflow a las 05:30 AM los lunes, miércoles y viernes 
    branches:
      - main # Asegúrate que esta sea tu rama principal de código
  pull_request:
    branches:
      - main # Asegúrate que esta sea tu rama principal de código

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # Definimos las variables que nos diste para que estén disponibles en todo el job
    env:
      DJANGO_DEBUG: 0 # Asegúrate de que esta variable esté definida en los secretos de GitHub (True)
      STRIPE_TEST_OVERRIDE: 'True' 
      NEON_TEST_BRANCH: 'Secuvast-Test-Delete'  # El nombre de tu rama de prueba en Neon
      NEON_PROD_BRANCH: 'Secuvast-Prod'       # El nombre de tu rama principal en Neon
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }} # Clave de API de Stripe, almacenada en los secretos de GitHub

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Neon CLI
        run: npm install -g neonctl
      
      # Este paso es importante cuando usas un nombre fijo para la rama de prueba.
      # Obtiene la URL de la base de datos para la rama de prueba
      - name: Get Connection String for Test Branch
        run: |
          DB_URL=$(neonctl connection-string \
            --branch "${{ env.NEON_TEST_BRANCH }}" \
            --database-name "neondb" \
            --project-id "${{ secrets.NEON_PROJECT_ID }}")
          echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}

      - name: Setup Django Secret Key
        run: echo "DJANGO_SECRET_KEY=$(openssl rand -base64 32)" >> $GITHUB_ENV

      - name: Install Python Dependencies
        run: |
            python -m pip install pip --upgrade
            python -m pip install -r saas/requirements.txt

        # Syncroniza los usuarios de Django con Stripe (Subscripciones)
      - name: Django users Sync Stripe Subscriptions
        working-directory: ./saas/src
        if: github.event.schedule != '0 1,12 * * *'
        
        run: |
          python manage.py sync_user_subs --day-start 0 --day-end 1

        #Ejecuta el comando para limpiar suscripciones de Stripe que estan malas
      - name: Django users Clear Dangling Stripe Subscriptions
        working-directory: ./saas/src
        if: github.event.schedule == '0 4 1 * *'
        run: |
            python manage.py clear_dangling_stripe_subs --day-start 0 --day-end 0 