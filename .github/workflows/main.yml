name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main # Asegúrate que esta sea tu rama principal de código
  pull_request:
    branches:
      - main # Asegúrate que esta sea tu rama principal de código

jobs:
  build-and-test-Main:
    runs-on: ubuntu-latest

    # Definimos las variables que nos diste para que estén disponibles en todo el job
    env:
      DJANGO_DEBUG: 'False'
      NEON_TEST_BRANCH: 'Secuvast-Test-Delete'  # El nombre de tu rama de prueba en Neon
      NEON_PROD_BRANCH: 'Secuvast-Prod'       # El nombre de tu rama principal en Neon

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Neon CLI
        run: npm install -g neonctl
      
      # Este paso es importante cuando usas un nombre fijo para la rama de prueba.
      # Intenta borrar la rama de una ejecución anterior, por si falló y no se limpió.
      - name: Delete Old Test Branch (if it exists)
        continue-on-error: true # No falles si la rama no existe
        run: |
          neonctl branches delete "${{ env.NEON_TEST_BRANCH }}" --project-id "${{ secrets.NEON_PROJECT_ID }}"
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}

      # Crea la rama de prueba usando los nombres que definiste
      - name: Create Neon Test Branch
        run: |
          neonctl branches create \
            --name "${{ env.NEON_TEST_BRANCH }}" \
            --parent "${{ env.NEON_PROD_BRANCH }}" \
            --project-id "${{ secrets.NEON_PROJECT_ID }}"
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}

      # Obtiene la URL de la base de datos para la rama de prueba
      - name: Get Connection String for Test Branch
        run: |
          DB_URL=$(neonctl connection-string \
            --branch "${{ env.NEON_TEST_BRANCH }}" \
            --database-name "neondb" \
            --project-id "${{ secrets.NEON_PROJECT_ID }}")
          echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}

      - name: Setup Django Secret Key
        run: echo "DJANGO_SECRET_KEY=$(openssl rand -base64 32)" >> $GITHUB_ENV

      - name: Install Python Dependencies
        run: python -m pip install -r saas/requirements.txt

      - name: Django Migrate
        working-directory: ./saas/src
        run: python manage.py migrate --noinput

      - name: Run Django Tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
        working-directory: ./saas/src
        run: python manage.py test --keepdb

      # Limpia y borra la base de datos temporal al final
      - name: Clean Up Test Branch on Neon
        if: always() # Se ejecuta siempre, incluso si los tests fallan
        run: |

          neonctl branches delete "${{ env.NEON_TEST_BRANCH }}" \
            --project-id "${{ secrets.NEON_PROJECT_ID }}"
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}